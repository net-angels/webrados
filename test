#include <fcgi_config.h>
#include <stdlib.h>
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#include <fcgi_stdio.h>
#include <string.h>
#include <errno.h>
#include <syslog.h>
#include <librados.h>
#include <stdbool.h>

#define BUFFSZ 1024

const char ceph_config[] = "/etc/ceph/ceph.conf";
const char logger_file[] = "/tmp/uploader.log";
const char program[] = "CephUploader";
FILE * logger_FD = NULL;

void open_log() {
    logger_FD = fopen(logger_file, "a");
    if (logger_FD == NULL) {
        fprintf(stderr, "Error: %s\n", strerror(errno));
    }
    openlog(program, LOG_CONS | LOG_PID | LOG_NDELAY, LOG_LOCAL0);
}

void close_log() {
    if (logger_FD != NULL) {
        fclose(logger_FD);
        fflush(logger_FD);
    }
    closelog();
}

void vlog(const char *fmt, va_list args) {
    char lbuffer[1024];
    vsprintf(lbuffer, fmt, args);
    if (NULL != logger_FD) {
        fputs(lbuffer, logger_FD);
    } else {
        syslog(LOG_INFO, "%s", lbuffer);
    }
}

void logger(const char *fmt, ...) {
    va_list args;
    va_start(args, fmt);
    vlog(fmt, args);
}

int main() {

    char *param = NULL, *p = NULL;
    char *duplicate = NULL;
    char filename[256];
    char poolname[32 + 1];

    char buffer[BUFFSZ] = {0};
    int len = 0;
    int sz = 0;
    long int MB = 1024^2;
    long int GB = 1024^3;
    static bool ctr = true;
    //
    rados_ioctx_t io = NULL;
    rados_completion_t comp;
    rados_t cluster = NULL;

    int err = 0;

    open_log();
    logger("Starting application\n");

    while (FCGI_Accept() >= 0) {
        //
        p = NULL;
        param = NULL;

        memset(poolname, '\0', 33);
        memset(filename, '\0', 256);
        //
        printf("Content-type: text/html\r\n\r\n");
        //
        char *contentLength = getenv("CONTENT_LENGTH");
        param = getenv("QUERY_STRING");
        //
        if (NULL != param) {
            duplicate = strndup(param, strlen(param));
        }
        if (NULL == duplicate) {
            logger("Error: %s\n", strerror(errno));
            continue;
        }
        p = strtok(duplicate, "|");
        if (p != NULL) {
            sz = strlen(p);
            if (sz > 32)sz = 32;
            strncpy(poolname, p, sz);
        }

        p = strtok(NULL, "|");
        if (p != NULL) {
            sz = strlen(p);
            if (sz > 255)sz = 255;
            strncpy(filename, p, sz);
        }

        if (duplicate)free(duplicate);
        //
        if (NULL == poolname || NULL == filename || (0 == strcmp(poolname, "")) || (0 == strcmp(filename, ""))) {
            printf("No parameters given<br />\n");
            printf("Sample: curl -T filename http://uploadhost.com/pathwhatever?poolname|filename\n");
            logger("No parameters given\n");
            ctr = false;
            continue;
        } else {
            ctr = true;
        }
        //
        if (contentLength != NULL) {
            len = strtol(contentLength, NULL, 10);
        } else {
            len = 0;
        }
        //
        if (len <= 0) {
            printf("No data from standard input\n");
            logger("No data from standard input\n");
        } else {
            int i = 0, written = 0;
            //
            if (ctr) {

                logger("Creating cluster handle\n");
                err = rados_create(&cluster, NULL);
                if (err < 0) {
                    logger("Cannot create a cluster handle: %s\n", strerror(-err));
                    continue;
                }
                //
                logger("Reading CEPH config file\n");
                err = rados_conf_read_file(cluster, ceph_config);
                if (err < 0) {
                    logger("Cannot read config file: %s\n", strerror(-err));
                    continue;
                }

                logger("Connecting to cluster\n");
                err = rados_connect(cluster);
                if (err < 0) {
                    logger("Cannot connect to cluster: %s\n", strerror(-err));
                    continue;
                }
                //
                logger("Opening rados pool [%s]\n", poolname);
                err = rados_ioctx_create(cluster, poolname, &io);
                if (err < 0) {
                    logger("Cannot open rados pool %s: %s\n", poolname, strerror(-err));
                    rados_shutdown(cluster);
                    continue;
                }
                logger("Creating completion\n");
                err = rados_aio_create_completion(NULL, NULL, NULL, &comp);
                if (err < 0) {
                    logger("Could not create aio completion: %s\n", strerror(-err));
                    rados_ioctx_destroy(io);
                    rados_shutdown(cluster);
                    continue;
                }
                logger("Expecting %d bytes\n", len);
                logger("Writing to [%s -> %s]\n", poolname, filename);

                while (0 != (written = fread(buffer, sizeof (char), sizeof buffer, stdin))) {
                    if (written < 0) {
                        logger("Error: %s\n", strerror(errno));
                        break;
                    }
                    err = rados_aio_append(io, filename, comp, (const char *) buffer, written);
                    if (err < 0) {
                        logger("Could not schedule aio append: %s\n", strerror(-err));
                        rados_aio_release(comp);
                        rados_ioctx_destroy(io);
                        rados_shutdown(cluster);
                        break;
                    } else {
                        if (i >= GB) {
                            if (0 == (i % (MB * 100)) && i == 0) {
                                logger("Uploaded %d bytes", i);
                            }
                        }
                        i += written;
                        logger("Uploaded %d bytes\n", written);
                    }
                }
                logger("Upload completed: %s has %d bytes\n", filename, i);
                ////////////////////////////////////////////////////////////////////
                if (written >= 0) {
                    logger("Waiting for completion\n");
                    rados_aio_wait_for_complete(comp);
                    rados_aio_wait_for_safe(comp);
                }
                logger("Releasing completion\n");
                rados_aio_release(comp);
                //
                logger("Destroying IO\n");
                if (io != NULL) {
                    rados_ioctx_destroy(io);
                }
                //
                logger("Shutting down cluster\n");
                if (cluster != NULL) {
                    rados_shutdown(cluster);
                }
            } /* if (ctr) */
        } /* else */
        //
    } /* while */
    //
    logger("Closing application\n");
    close_log();
    FCGI_Finish();
    return 0;
}
