#include "utceph.h"
#include "protos.h"

uint64_t PUT(rados_ioctx_t io, FCGX_Request *request, char *filename, int len) {
    uint64_t i = 0, written = 0;
    int e;
    while (0 != (written = FCGX_GetStr(buffer, sizeof buffer, request->in))) {
        if (written < 0) {
            logger("Error: %s\n", strerror(errno));
            return 0;
        }
        e = rados_append(io, filename, (const char *) buffer, written);
        if (e < 0) {
            logger("Error: %s\n", strerror(-e));
            rados_ioctx_destroy(io);
            return 0;
        } else {
            if (len >= (100 * MB)) {
                if (0 == (i % (50 * MB)) && i != 0) {
                    logger("Uploaded %d bytes", i);
                }
            }
            i += written;
        }
    }
    return (i > 0) ? i : 0;
}

uint64_t GET(rados_ioctx_t io, FCGX_Request *request, char *filename) {
    uint64_t osize = 0;
    uint64_t wr = 0;
    uint64_t off = 0;

    if(filename == NULL || 0 == strcmp(filename,"")|| NULL == request->out){
        return 0;
    }
    char *mime = xmalloc(32 + 1);
    strncpy(mime, get_mime(filename), 32);

    logger("Accessing file: %s\n", filename);

    int fstat = rados_stat(io, (const char *) filename, &osize, NULL);

    if (0 > fstat) {
        FCGX_FPrintF(request->out, "%s", not_found);
        logger("Error: could not stat resource [%s]\n", filename);
        return 0;
    }
    logger("Downloading file size: %ld\n", osize);
    logger("%p,%s,%ld", request->out, mime, osize);/////////////////
    FCGX_FPrintF(request->out, "Status: 200 OK\r\nContent-Type: %s\r\nContent-Length: %ld\r\n\r\n", mime, osize);
    if (mime)free(mime);

    while (osize > 0) {
        char buf[8192];
        int rlen = rados_read(io, filename, buf, UMIN(osize, sizeof buf), off);
        if (rlen <= 0) break;
        wr += FCGX_PutStr(buf, rlen, request->out);
        FCGX_FFlush(request->out);
        osize -= rlen;
        off += rlen;
    }
    return (wr > 0) ? wr : 0;
}